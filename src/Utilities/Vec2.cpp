#include "Vec2.h"

namespace MarkTwo
{
    namespace Utilities
    {


        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
        vec2::vec2()
        {
            x = 0.0f;
            y = 0.0f;
        }


        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
        vec2::vec2(const float& x, const float& y)
        {
            this->x = x;
            this->y = y;
        }


        // -----------------------------------------------------------------
        // Vector add, subtract, multiply, divide
        // -----------------------------------------------------------------
        vec2& vec2::Add(const vec2& other)
        {
            x += other.x;
            y += other.y;
            return *this;
        }


        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
        vec2& vec2::Subtract(const vec2& other)
        {
            x -= other.x;
            y -= other.y;
            return *this;
        }


        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
        vec2& vec2::Multiply(const vec2& other)
        {
            x *= other.x;
            y *= other.y;
            return *this;
        }


        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
        vec2& vec2::Divide(const vec2& other)
        {
            x /= other.x;
            y /= other.y;
            return *this;
        }


        // -----------------------------------------------------------------
        // Vector operators
        // -----------------------------------------------------------------
        vec2 operator+(vec2 left, const vec2& right)
        {
            return left.Add(right);
        }


        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
        vec2 operator-(vec2 left, const vec2& right)
        {
            return left.Subtract(right);
        }


        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
        vec2 operator*(vec2 left, const vec2& right)
        {
            return left.Multiply(right);
        }


        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
        vec2 operator/(vec2 left, const vec2& right)
        {
            return left.Divide(right);
        }


        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
        vec2& vec2::operator+=(const vec2& other)
        {
            *this = *this + other;
            return *this;
        }


        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
        vec2& vec2::operator-=(const vec2& other)
        {
            *this = *this - other;
            return *this;
        }


        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
        vec2& vec2::operator*=(const vec2& other)
        {
            *this = *this * other;
            return *this;
        }


        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
        vec2& vec2::operator/=(const vec2& other)
        {
            *this = *this / other;
            return *this;
        }


        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
        bool vec2::operator==(const vec2& other)
        {
            return x == other.x && y == other.y;
        }


        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
        bool vec2::operator!=(const vec2& other)
        {
            return !(*this == other);
        }
    }
}
